#pragma config(StandardModel, "PS CASCADE EFFECT")
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

// The total number of motors available to the robot (based on number of controllers attached)
#define numMotors 8

/*
*	watchMotors
*	While all motors are running, watch their encoders. If the motor gets stuck, stop all motors
*	and back the affected motor up a short distance.
*/
task watchMotors ()
{
	// Store all the previous encoder values for the motors
	long prevEncoderValue[numMotors];

	// The threshold distance. If the encoder changes by less than this much in a rotation, stop the motor
	long encoderThreshold = 300;

	// Load the prevEncoderValue array with the encoders' current values
	for(short i = 0; i<numMotors; i++)
	{
		prevEncoderValue[(tMotor)i] = nMotorEncoder[(tMotor)i];
	}

	// Loop forever, or until this process is killed externally
	while(true)
	{
		// Loop through every available motor
		for(short i = 0; i<numMotors; i++)
		{
			// If the motor speed is set to anything but 0, and the motor encoder value has changed by less than
			// the acceptable threshold since the last loop, stop and reverse the motor
			if(motor[(tMotor)i]!=0&& ((long)abs(prevEncoderValue[(tMotor)i]-nMotorEncoder[(tMotor)i]))>encoderThreshold)
			{
				// Store the desired speed (also stores the direction)
				short motorSpeed = motor [(tMotor)i];

				// Halt all other tasks
				hogCPU();

				// Turn off all motors
				allMotorsTo(0);

				// If the motor is one of the drive motors, reverse both of the drive motors.
				if((tMotor)i==mDriveLeft || (tMotor)i==mDriveRight)
				{
					// Set both motors to the reverse of the original speed
					driveMotorsTo(-motorSpeed);
					// Wait 200 ms
					wait10Msec(20);
					// Turn the motors back off
					driveMotorsTo(0);
				}
				// For all motors besides the drive motors
				else
				{
					// Set the affected motor to the reverse of its original speed
					motor[(tMotor)i] = -motorSpeed;
					// Wait 200 ms
					wait10Msec(20);
					// Turn off the affected motor
					motor[(tMotor)i] = 0;
				}

				// Allow other tasks to run again
				releaseCPU();
			}	// End of chekc
		}	// End of for loop
	}	// End of main loop
}	// END
